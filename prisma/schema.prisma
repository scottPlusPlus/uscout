// CHEATSHEET
// after updating the model, run `npx prisma migrate dev`
// and `npx prisma generate`

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model UInfo {
  url         String  @id
  fullUrl     String  @default("")
  hash        String
  title       String
  summary     String
  image       String
  contentType String?
  duration    Int?
  likes       Int?
  //dislikes      Int?
  authorName  String?
  authorLink  String?
  //publishedTime Int?

  created DateTime @default(now())
  updated DateTime @updatedAt
  checked DateTime @default(now())
}

model UInfoDb {
  url      String   @id
  dataJson String
  updated  DateTime @updatedAt
}

model ItemModel {
  id         String   @id
  collection String
  url        String
  comment    String   @default("")
  tags       String   @default("")
  priority   Int      @default(0)
  status     String   @default("")
  created    DateTime @default(now())
  updated    DateTime @updatedAt
}

model Collection {
  id          String   @id @default(cuid())
  title       String   @default("")
  description String   @default("")
  settings    String   @default("")
  created     DateTime @default(now())
  updated     DateTime @updatedAt
}

model CollectionRoles {
  id           String @id
  collectionId String
  userId       String
  role         String
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  notes    Note[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model AnalyticEvent {
  id    Int      @id @default(autoincrement())
  ts    DateTime @default(now())
  ip    String
  event String
  data  String
}

model AnalyticEventByDay {
  id    Int      @id @default(autoincrement())
  day   DateTime @default(now())
  event String
  data  String
  count Int
}

model Feedback {
  id       Int      @id @default(autoincrement())
  ts       DateTime @default(now())
  ip       String
  context  String
  feedback String
  email    String
  status   String
}

model Blobs {
  key   String @id
  value String
}
